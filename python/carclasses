#!/usr/bin/env python

# Define initial Car() class
#
class Car(object):
    # Member variable
    #
    condition = "new"
    
    # Initial parameters for a new Car()
    #
    def __init__(self, model, color, mpg):
        self.model = model
        self.color = color
        self.mpg   = mpg
        
    # Class method to print the description of a Car
    #
    def display_car(self):
        print 'This is a ' + self.color + ' ' + self.model + ' with ' + str(self.mpg) + ' MPG.'
        
    # Class method to "drive" a car thus changing condition
    #
    def drive_car(self):
        self.condition = 'used'

# New inherited ElectricCar(Car) class
#
class ElectricCar(Car):
    # Initialized with an additional parameter
    #
    def __init__(self, model, color, mpg, battery_type):
        self.model = model
        self.color = color
        self.mpg   = mpg
        self.battery_type = battery_type
    
    # Override parents drive_car() method
    #
    def drive_car(self):
        self.condition='like new'
        
# Define a new Car() object
#
my_car = ElectricCar("DeLorean", "silver", 88, 'molten salt')
print my_car.condition
my_car.drive_car()
print my_car.condition