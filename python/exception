#!/usr/bin/env python

import sys

# We can use try...except blocks to handle situations where 
# and error is thrown without disrupting program execution
# A block is executed as follows:

# First try the clause between the 'try' and 'except'
# keywords. This clause is executed. If no error is thrown,
# the except block is skipped. 
#
while(1):
    try:
        a = int( raw_input('Enter a number> ') )
        break

    # If an exception occurs during execution of 'try' clause,
    # the rest of the clause is skipped.
    #
    except ValueError:
        # If the exception type matches the name after the 'except'
        # keyword, the except clause is executed and program execution
        # continues. 
        #
        print ('That\'s not a number...')

# If the exception does not match the name after the 'except'
# keyword, it is passed to outer try statements. If no match is 
# found, execution stops with an error message since the exception
# is not handled.

# A try...except block may have more than one 'except' clause,
# executing a different clause depending on the exception thrown.
# The last except clause may omit exception names to act as a wildcard,
# this is dangerous since it will mask all error exceptions
#
try:
    f = open('myfile.txt')
    s = f.readline()
    i = int(s.strip())
except IOError as e:
    print "I/O error({0}): {1}".format(e.errno, e.strerror)
except ValueError:
    print "Could not convert data to an integer."
except:
    print "Unexpected error:"

# We can include multiple exception names in clause
# by specifying them in a tuple
#
try:
    pass
except (ValueError, TypeError, NameError):
    pass

# The try...except block can also make use of an 'else'
# clause. The else clause is placed after all 'except' clauses
# and is executed if the try clause does not raise an exception
#
for arg in sys.argv[1:]:
    # Try to open the next file argument
    #
    try:
        f = open(arg, 'r')
    # If there is an IO error...
    #
    except IOError:
        print 'cannot open', arg
    # If there was no error while opening...
    #
    else:
        print arg, 'has', len(f.readlines()), 'lines'
        f.close()

# The programmer can force an exception to occur by using
# the 'raise' statement. This is useful if we dont want to 
# handle an exception, but want to do something if it occurrs.
#
try:
    # Cause the exception
    #
    raise NameError("Oops.")
# Always triggered since we raise it ourselves
#
except NameError:
    # Do something
    #
    print 'Did I do that?'
    # Re-raise the exception so that it is not handled
    #
    raise

# The try...except block may also have a 'finally' clause 
# which is executed in all cicumstances. Even if an exception
# occurs or doesn't occur, or a break, continue, or return is
# thrown in any other clause of the try/except block, the 'finally'
# clause is ALWAYS executed "on the way out"/
#
try:
    pass
except:
    pass
else:
    pass
finally:
    print "Idk what happened, but we made it."

