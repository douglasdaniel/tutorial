#!/usr/bin/env python

# general function imports
from pymongo import MongoClient
import pymongoy

# First create a MongoClient and the running mongod instance
# connects on the default howst and port
client = MongoClient()

# Sepecify the host and port explicitly as follows
client = MongoClient('localhost', 27017)

# Get or create a database using attribute style access on MongoClient instance
mydb = client.DB_NAME
#or
mydb = client['DB_NAME']

# Getting a collection wrks like getting a database, but now we
# use attribute of the database, not client
mycollection = mydb.COLLECTION_NAME

# PyMongo uses dictionaries to represent documents
document = {'name' : 'Daniel',
            'major' : 'ECE'
            }

# To insert a document into a collection, use the inssert_one method
# the insert method returns an instance of InsertOneResult
document_id = mycollection.insert(document)

# The collection is created in truth once the first document is inserted
# check with collection_names method
mydb.collection_names(include_system_collections=False)

# To query for a single document, use the find_one().
# Returns first matching document or None
mycollection.find_one()

# We can perfrom specific query
mycollection.find_one({'name' : 'Daniel'})

# We can also search by ObjectId
mycollection.fine_one({'_id' : document_id})

# We can also perform bulk inserts by passing a (list) of documents (dictionaries) to 
# the insert_many() function
new_documents = [{'name' : 'Claire',
                  'gender' : 'female'},
                 {'name' : 'cheese',
                  'flavor' : 'yummy',
                  'color' : 'yellow'}]

coll.insert_many(new_docs)
# insert many returns a (list) of object id's for the documents created.

# We can query fofr morre than one document using the find() method on a collection
# The find() method returns a pointer we can iterate over the documents
for doc in mycollection.find():
    # do something to document
    doc

# We can pass document criteria to find() to limit results
for doc in mycollection.fine({'name' : 'Daniel'}):
    doc

# If we just want to know the amount of results of a query, use count() method no 
# a collection
mycollection.count()

# indexes can help accelerate certain queries and can also add additional
# functionality to querying and storing documents. Create and index by using the
# create_index() method on a collection. 

# Here the index created prevents duplicate entries by name key
mydb.mycollection.create_index([('name', pymongo.ASCENDING)], unique=True)

# Check current indexes like so
mydb.mycollection.index_information() # or convert output to (list) for easy reading


