#!/usr/bin/env python

# Classes are created by calling the 'class' function
# The argument of the new class is the class it inherits from
# All classes must have an '__init()__' function definition with
# at least one argument, 'self' which refers to the class. 'self'
# is the first argument and doesn't need to be the word 'self',
# but it must be the first parameter of __intit__()

# Basic class definition
#
class Animals(object):
    # Global scobe variable available to all animals
    #
    alive = True 
    # Initialization of class
    #
    def __init__(self, species, age):
        # Define parameters with dot notation
        #
        self.species = species
        self.age = age
    # Classes can have their own functions, called methods
    # __init__() is a class method
    # 'self' is the first argument of any class method
    #
    def description(self):
        print self.species
        print self.age

# Define three new animal objects
#
andrew = Animals('bear', 25)
daniel = Animals('wolf', 23)
steph = Animals('cat', 23)

print andrew.fs

# Put objects in list
#
nerds = [andrew, daniel, steph]

# Print out object attributes
#
for x in nerds:
    print x.species
    print x.age

# Same result as above using description() method
#
for x in nerds:
    x.description()

# Member variables are available to all members of
# of a class

# A class can inherit the methods and attributes of another
# class to use. We can even override the methods of the parent class
# and tweak them

class Official(object):
    def __init__(self, name):
        self.name = name
    # A greeting for normal citizenss
    #
    def greet(self, other):
        print 'Where is your paperwork, %s?' % other.name

# Inherited class
#
class Citizen(Official):
    # No __init__() method needed here
    
    # Override the greet() method from parent class
    #
    def greet(self, other):
        print 'Hello %s-san!' % other.name
    
    # We can access the method of the parent class using the
    # built-in super() function.
    # The first argument to super is the name of the child class
    # The second argument is 'self' or the equivalent
    #
    def super_greet(self, other):
        super(Citizen, self).greet(other)

# Define new citizen
#
one = Citizen('Tomoya')

# Define a new official
#
two = Official('Takahaka')

# The methods both call a slightly different version of greet()
#
one.greet(two)
two.greet(one)

# Using the method from the parent class
# 
one.super_greet(two)

# By overriding the __repr__() method in a class, we
# can change how the class is represented (such as when printed)

# Define a class for 3D points in space
#
class Point3D(object):
    def __init__(self,x,y,z):
        self.x = x
        self.y = y
        self.z = z
    
    # Override the __repr__() method and return how we want the
    # class printed 
    #
    def __repr__(self):
        return '(%d, %d, %d)' % (self.x, self.y, self.z)
    
my_point = Point3D(1,2,3)
print my_point
